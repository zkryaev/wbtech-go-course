package pattern

/*
	Реализовать паттерн «фабричный метод».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Factory_method_pattern
*/

/*

	Применимость:
		1. Когда заранее неизвестны типы и зависимости объектов, с которыми должен работать ваш код.
		2. Когда вы хотите дать возможность пользователям расширять части вашего фреймворка или библиотеки.
		3. Когда вы хотите экономить системные ресурсы, повторно используя уже созданные объекты, вместо порождения новых.

	Плюсы и минусы:
		\+ Избавляет класс от привязки к конкретным классам продуктов.
		\+ Выделяет код производства продуктов в одно место, упрощая поддержку кода.
		\+ Упрощает добавление новых продуктов в программу.
		\+ Реализует _принцип открытости/закрытости_.
		\- Может привести к созданию больших параллельных иерархий классов, так как для каждого класса продукта надо создать свой подкласс создателя

*/

type BattleUnit interface {
	Fight()
}

type Warrior struct{}

func (w Warrior) Fight() {}

type Wolf struct{}

func (w Wolf) Fight() {}

type Spawn interface {
	Create() BattleUnit
}

type BarracsSpawn struct{}

func (bs BarracsSpawn) Create() BattleUnit {
	return Warrior{}
}

type CellSpawn struct{}

func (cs CellSpawn) Create() BattleUnit {
	return Wolf{}
}
